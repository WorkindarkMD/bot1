import React, { useState, useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { 
  Bell, Settings, User, BarChart2, TrendingUp, Inbox, Activity, 
  Zap, Grid, DollarSign, LogOut, Home, RefreshCw, Search, 
  ChevronDown
} from 'lucide-react';

import useApi from '../hooks/useApi';
import DashboardContent from './dashboard/DashboardContent';
import ChartContent from './chart/ChartContent';
import SignalsContent from './signals/SignalsContent';
import CopyTradingContent from './copytrading/CopyTradingContent';
import SmartGridContent from './smartgrid/SmartGridContent';
import PositionsContent from './positions/PositionsContent';
import AnalyticsContent from './analytics/AnalyticsContent';
import SettingsModal from './common/SettingsModal';

const TradingPlatform = () => {
  // Refs –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –≤–∏–¥–∂–µ—Ç–∞ TradingView
  const dashboardRef = useRef(null);
  const chartRef = useRef(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [activeModule, setActiveModule] = useState('dashboard');
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [language, setLanguage] = useState('ru');
  const [darkMode, setDarkMode] = useState(true);
  const [pairSearch, setPairSearch] = useState('');
  
  // Redux state
  const dispatch = useDispatch();
  const exchange = useSelector(state => state.exchange);
  const marketType = useSelector(state => state.marketType);
  const interval = useSelector(state => state.interval);
  const currentPair = useSelector(state => state.currentPair);
  const pairs = useSelector(state => state.pairs);
  const isLoading = useSelector(state => state.isLoading);
  const status = useSelector(state => state.status);
  
  // API Hooks
  const { 
    initializeAppData, 
    changeExchange, 
    changePair, 
    changeInterval, 
    fetchPairs
  } = useApi();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initApp = async () => {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      
      try {
        await initializeAppData();
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      }
    };
    
    initApp();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–ø—Ü–∏–π —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
  const renderPairOption = (pair, index) => {
    // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (typeof pair === 'string') {
      return <option key={`str-${pair}`} value={pair}>{pair}</option>;
    }
    
    // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (–∫–∞–∫ –≤ –≤–∞—à–∏—Ö API-–æ—Ç–≤–µ—Ç–∞—Ö)
    if (typeof pair === 'object' && pair !== null) {
      // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (baseAsset + quoteAsset)
      if (pair.baseAsset && pair.quoteAsset) {
        const pairSymbol = `${pair.baseAsset}${pair.quoteAsset}`;
        return <option key={`pair-${pairSymbol}-${index}`} value={pairSymbol}>{pairSymbol}</option>;
      }
      
      // –î–ª—è –ø–∞—Ä —Å —É–∂–µ –≥–æ—Ç–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º
      if (pair.symbol) {
        return <option key={`symbol-${pair.symbol}`} value={pair.symbol}>{pair.symbol}</option>;
      }
    }
    
    // –î–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    return null;
  };

  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
  const [filteredPairs, setFilteredPairs] = useState([]);
  
  useEffect(() => {
    if (!Array.isArray(pairs)) {
      console.warn('pairs is not an array:', pairs);
      setFilteredPairs([]);
      return;
    }
    
    if (pairSearch.trim() === '') {
      setFilteredPairs(pairs);
    } else {
      setFilteredPairs(
        pairs.filter(pair => {
          if (typeof pair === 'string') {
            return pair.toLowerCase().includes(pairSearch.toLowerCase());
          } else if (typeof pair === 'object' && pair !== null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø–∞—Ä
            if (pair.symbol) {
              return pair.symbol.toLowerCase().includes(pairSearch.toLowerCase());
            } else if (pair.baseAsset && pair.quoteAsset) {
              const fullSymbol = `${pair.baseAsset}${pair.quoteAsset}`;
              return fullSymbol.toLowerCase().includes(pairSearch.toLowerCase());
            } else {
              const pairStr = JSON.stringify(pair);
              return pairStr.toLowerCase().includes(pairSearch.toLowerCase());
            }
          }
          return false;
        })
      );
    }
  }, [pairSearch, pairs]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∏–¥–∂–µ—Ç–æ–º TradingView
  const syncTradingViewWidgets = (action, value) => {
    console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ TradingView: ${action} = ${value}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª–∏ Dashboard, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (dashboardRef.current && dashboardRef.current.tradingViewRef) {
        if (action === 'changeSymbol') {
          dashboardRef.current.tradingViewRef.changeSymbol(value);
        } else if (action === 'changeInterval') {
          dashboardRef.current.tradingViewRef.changeInterval(value);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª–∏ Chart, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (chartRef.current && chartRef.current.tradingViewRef) {
        if (action === 'changeSymbol') {
          chartRef.current.tradingViewRef.changeSymbol(value);
        } else if (action === 'changeInterval') {
          chartRef.current.tradingViewRef.changeInterval(value);
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤ TradingView:`, error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏
  const handleChangeExchange = (e) => {
    changeExchange(e.target.value);
  };

  const handleChangeMarketType = (type) => {
  dispatch({ type: 'SET_MARKET_TYPE', payload: type });
  let productType;
  if (type === 'futures' && exchange === 'bitget') {
    productType = 'umcbl';
  }
  console.log('–í—ã–∑–æ–≤ fetchPairs —Å:', exchange, type, productType);
  fetchPairs(exchange, type, productType);
};

  const handleChangePair = (e) => {
    const newPair = e.target.value;
    changePair(newPair);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç—ã TradingView
    syncTradingViewWidgets('changeSymbol', newPair);
  };

  const handleChangeInterval = (newInterval) => {
    changeInterval(newInterval);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç—ã TradingView
    syncTradingViewWidgets('changeInterval', newInterval);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ TradingView (–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
  const handleSymbolChangeFromWidget = (newSymbol) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redux —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–æ–≥–æ
    if (currentPair !== newSymbol) {
      changePair(newSymbol);
    }
  };
  
  const handleIntervalChangeFromWidget = (newInterval) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Redux —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–æ–≥–æ
    if (interval !== newInterval) {
      changeInterval(newInterval);
    }
  };

  // –†–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø—Ä–æ–ø—Å–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
  const renderActiveModule = () => {
    const commonProps = {
      onSymbolChange: handleSymbolChangeFromWidget,
      onIntervalChange: handleIntervalChangeFromWidget,
    };
    
    switch (activeModule) {
      case 'dashboard':
        return <DashboardContent {...commonProps} ref={dashboardRef} id="dashboard-container" />;
      case 'chart':
        return <ChartContent {...commonProps} ref={chartRef} id="chart-container" />;
      case 'signals':
        return <SignalsContent />;
      case 'copytrading':
        return <CopyTradingContent />;
      case 'smartgrid':
        return <SmartGridContent />;
      case 'positions':
        return <PositionsContent />;
      case 'analytics':
        return <AnalyticsContent />;
      default:
        return <DashboardContent {...commonProps} ref={dashboardRef} id="dashboard-container" />;
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-900 text-gray-100">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <header className="bg-gray-800 px-6 py-3 flex items-center justify-between border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <span className="text-xl font-bold text-blue-400">TRADING</span>
          <span className="text-xl font-bold text-white">PLATFORM</span>
        </div>
        <div className="flex space-x-4 items-center">
          <div className="flex items-center space-x-2 mr-3">
            <select 
              className="bg-gray-700 text-white px-2 py-1 rounded-lg border border-gray-600 text-sm" 
              value={language} 
              onChange={(e) => setLanguage(e.target.value)}
            >
              <option value="ru">RU</option>
              <option value="en">EN</option>
            </select>
            <button 
              className={`p-1 rounded-full ${darkMode ? 'bg-gray-600' : 'bg-gray-400'}`} 
              onClick={() => setDarkMode(!darkMode)}
            >
              {darkMode ? 'üåô' : '‚òÄÔ∏è'}
            </button>
          </div>
          <div className="bg-green-500/20 text-green-400 px-3 py-1 rounded-full text-sm flex items-center">
            <span className="h-2 w-2 bg-green-400 rounded-full mr-2"></span>
            –°–û–°–¢–û–Ø–ù–ò–ï: {status?.initialized ? '–ê–ö–¢–ò–í–ù–û' : '–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø...'}
          </div>
          <button className="p-2 text-gray-400 hover:text-white">
            <User size={20} />
          </button>
          <button 
            className="p-2 text-gray-400 hover:text-white"
            onClick={() => setSettingsOpen(true)}
          >
            <Settings size={20} />
          </button>
          <button className="p-2 text-gray-400 hover:text-white relative">
            <Bell size={20} />
            <span className="absolute top-1 right-1 h-2 w-2 bg-red-500 rounded-full"></span>
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="flex flex-1 overflow-hidden">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <nav className="w-64 bg-gray-800 p-4 overflow-y-auto">
          <div className="space-y-2">
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'dashboard' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('dashboard')}
            >
              <Home size={18} />
              <span>–ì–ª–∞–≤–Ω–∞—è</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'chart' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('chart')}
            >
              <TrendingUp size={18} />
              <span>–ì—Ä–∞—Ñ–∏–∫</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'signals' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('signals')}
            >
              <Zap size={18} />
              <span>–°–∏–≥–Ω–∞–ª—ã</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'copytrading' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('copytrading')}
            >
              <Activity size={18} />
              <span>–ö–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥ + AI</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'smartgrid' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('smartgrid')}
            >
              <Grid size={18} />
              <span>Adaptive Smart Grid</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'positions' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('positions')}
            >
              <DollarSign size={18} />
              <span>–ü–æ–∑–∏—Ü–∏–∏</span>
            </button>
            <button 
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg ${activeModule === 'analytics' ? 'bg-blue-600 text-white' : 'text-gray-400 hover:bg-gray-700'}`}
              onClick={() => setActiveModule('analytics')}
            >
              <BarChart2 size={18} />
              <span>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
            </button>
          </div>

          <div className="pt-4 mt-6 border-t border-gray-700">
            <button className="w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-red-400 hover:bg-red-500/10">
              <LogOut size={18} />
              <span>–í—ã—Ö–æ–¥</span>
            </button>
          </div>

          <div className="mt-6 border-t border-gray-700 pt-6">
            <div className="mb-4">
              <label htmlFor="exchange-select" className="block text-sm text-gray-400 mb-1">–ë–∏—Ä–∂–∞</label>
              <select 
                id="exchange-select" 
                className="w-full bg-gray-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:border-blue-500"
                value={exchange}
                onChange={handleChangeExchange}
              >
                <option value="binance">Binance</option>
                <option value="bybit">Bybit</option>
                <option value="mexc">MEXC</option>
                <option value="bitget">BITGET</option>
              </select>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-400 mb-1">–¢–∏–ø —Ä—ã–Ω–∫–∞</label>
              <div className="grid grid-cols-2 gap-2">
                <button 
                  className={`px-4 py-2 rounded-lg text-sm ${marketType === 'spot' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                  onClick={() => handleChangeMarketType('spot')}
                >
                  Spot
                </button>
                <button 
                  className={`px-4 py-2 rounded-lg text-sm ${marketType === 'futures' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                  onClick={() => handleChangeMarketType('futures')}
                >
                  Futures
                </button>
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-400 mb-1">–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞</label>
              <div className="mb-2">
                <div className="relative">
                  <input 
                    type="text" 
                    placeholder="–ü–æ–∏—Å–∫ –ø–∞—Ä—ã..." 
                    className="w-full bg-gray-700 text-white pl-9 pr-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:border-blue-500"
                    value={pairSearch}
                    onChange={(e) => setPairSearch(e.target.value)}
                  />
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
                </div>
              </div>
              <div className="flex items-center">
                <select 
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:outline-none focus:border-blue-500 mr-2"
                  value={currentPair}
                  onChange={handleChangePair}
                >
                  {Array.isArray(filteredPairs) && filteredPairs.length > 0 ? (
                    filteredPairs.map(renderPairOption)
                  ) : (
                    <option value="">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä...</option>
                  )}
                </select>
                <button 
                  className={`bg-gray-700 p-2 rounded-lg text-gray-400 hover:text-white ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
                  onClick={() => fetchPairs(exchange, marketType)}
                  disabled={isLoading}
                >
                  <RefreshCw size={18} className={isLoading ? 'animate-spin' : ''} />
                </button>
              </div>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm text-gray-400 mb-1">–¢–∞–π–º—Ñ—Ä–µ–π–º</label>
              <div className="grid grid-cols-5 gap-1">
                {['1m', '5m', '15m', '1H', '1D'].map(int => (
                  <button 
                    key={int}
                    className={`px-2 py-1 rounded-lg text-sm ${interval === int ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
                    onClick={() => handleChangeInterval(int)}
                  >
                    {int}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </nav>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <div className="flex-1 overflow-hidden">
          {renderActiveModule()}
        </div>
      </div>
      
      {/* –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ */}
      <footer className="bg-gray-800 px-6 py-2 text-sm text-gray-400 border-t border-gray-700 flex justify-between">
        <div>–°—Ç–∞—Ç—É—Å: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</div>
        <div className="flex items-center space-x-4">
          <div>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 2 –º–∏–Ω –Ω–∞–∑–∞–¥</div>
          <div>AI-–º–æ–¥–µ–ª—å: Claude 3.7 Sonnet</div>
        </div>
      </footer>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      {settingsOpen && <SettingsModal onClose={() => setSettingsOpen(false)} />}
    </div>
  );
};

export default TradingPlatform;