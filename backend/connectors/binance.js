// connectors/binance.js - –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∫ –±–∏—Ä–∂–µ Binance

const ExchangeConnectorInterface = require('./connector-interface');
const axios = require('axios');
const crypto = require('crypto');
const WebSocket = require('ws');

class BinanceConnector extends ExchangeConnectorInterface {
 constructor(apiConfig = {}) {
  super(apiConfig); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
  this.baseUrl = 'https://api.binance.com';
  this.wsBaseUrl = 'wss://stream.binance.com:9443/ws';
  this.httpClient = axios.create({
    baseURL: this.baseUrl,
    headers: {
      'X-MBX-APIKEY': this.apiKey
    }
  });
  this.wsConnections = {};
  this.config = apiConfig; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–µ—Ç–æ–¥–∞—Ö
}

  async initialize() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ Binance...');
    try {
      if (this.apiKey && this.secretKey) {
        await this.getAccountInfo();
      } else {
        await this.getExchangeInfo();
      }
      this.isInitialized = true;
      console.log('–ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä Binance —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ Binance:', error.message);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä Binance: ${error.message}`);
    }
  }

  generateSignature(queryString) {
    return crypto
      .createHmac('sha256', this.secretKey)
      .update(queryString)
      .digest('hex');
  }

  async getAccountInfo() {
    const timestamp = Date.now();
    const queryString = `timestamp=${timestamp}`;
    const signature = this.generateSignature(queryString);
    try {
      const response = await this.httpClient.get(`/api/v3/account?${queryString}&signature=${signature}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:', error.message);
      throw error;
    }
  }

  async getExchangeInfo() {
    try {
      const response = await this.httpClient.get('/api/v3/exchangeInfo');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ:', error.message);
      throw error;
    }
  }

 /**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
 * @param {string} marketType - —Ç–∏–ø —Ä—ã–Ω–∫–∞ ('spot' –∏–ª–∏ 'futures')
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
 */
async getTradingPairs(marketType = 'futures') {
  try {
    let endpoint, dataField, symbolField;
    
    // –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä—ã–Ω–∫–∞
    if (marketType === 'futures') {
      // –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
      endpoint = '/fapi/v1/exchangeInfo';
      dataField = 'symbols';
      symbolField = 'symbol';
    } else {
      // –î–ª—è —Å–ø–æ—Ç–∞
      endpoint = '/api/v3/exchangeInfo';
      dataField = 'symbols';
      symbolField = 'symbol';
    }
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º URL –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ä—ã–Ω–∫–∞
    const baseUrl = marketType === 'futures' ? 
      (this.config?.endpoints?.futures || 'https://fapi.binance.com') : 
      (this.config?.endpoints?.spot || 'https://api.binance.com');
      
    const client = axios.create({
      baseURL: baseUrl,
      headers: this.apiKey ? { 'X-MBX-APIKEY': this.apiKey } : {}
    });
    
    const response = await client.get(endpoint);
    
    if (!response.data || !response.data[dataField]) {
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: –ø–æ–ª–µ ${dataField} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
    const pairs = response.data[dataField]
      .filter(symbol => symbol.status === 'TRADING')
      .map(symbol => ({
        symbol: symbol[symbolField],
        baseAsset: symbol.baseAsset,
        quoteAsset: symbol.quoteAsset,
        market: marketType
      }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É - —Å–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã —Å USDT
    pairs.sort((a, b) => {
      // –ü–∞—Ä—ã —Å USDT –≤ –∫–æ–Ω—Ü–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const aHasUSDT = a.symbol.endsWith('USDT');
      const bHasUSDT = b.symbol.endsWith('USDT');
      
      if (aHasUSDT && !bHasUSDT) return -1;
      if (!aHasUSDT && bHasUSDT) return 1;
      
      // –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      return a.symbol.localeCompare(b.symbol);
    });
    
    return pairs;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:', error.message);
    throw error;
  }
}

  async getOpenOrders(pair) {
    if (!pair) {
      return [];
    }
    
    try {
      const timestamp = Date.now();
      const queryString = `symbol=${pair}&timestamp=${timestamp}`;
      const signature = this.generateSignature(queryString);
      
      const response = await this.httpClient.get(
        `/api/v3/openOrders?${queryString}&signature=${signature}`
      );
      
      return response.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—ã ${pair}:`, error.message);
      return [];
    }
  }


 async getChartData(params) {
  try {
    let symbol, interval, limit, endTime, marketType;

    if (typeof params === 'object') {
      ({ symbol, interval = '1h', limit = 100, endTime, marketType = 'spot' } = params);
    } else {
      symbol = params;
      interval = arguments[1] || '1h';
      limit = arguments[2] || 100;
      endTime = arguments[3] || null;
      marketType = arguments[4] || 'spot';
    }

    const requestParams = {
      symbol,
      interval,
      limit
    };

    if (endTime) {
      requestParams.endTime = endTime;
    }

    const isFutures = marketType === 'futures';
    const endpoint = isFutures ? '/fapi/v1/klines' : '/api/v3/klines';
    const baseUrl = isFutures ? 'https://fapi.binance.com' : 'https://api.binance.com';

    const response = await axios.get(`${baseUrl}${endpoint}`, {
      params: requestParams,
      headers: { 'X-MBX-APIKEY': this.apiKey }
    });

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return response.data.map(kline => ({
      openTime: kline[0],
      open: parseFloat(kline[1]),
      high: parseFloat(kline[2]),
      low: parseFloat(kline[3]),
      close: parseFloat(kline[4]),
      volume: parseFloat(kline[5]),
      closeTime: kline[6]
    }));
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã ${params.symbol || params}:`, error.message);
    throw error;
  }
}

  async cancelOrder(symbol, orderId) {
    if (!this.apiKey || !this.secretKey) {
      throw new Error('–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–ª—é—á–∏ API');
    }
    const timestamp = Date.now();
    const queryString = `symbol=${symbol}&orderId=${orderId}&timestamp=${timestamp}`;
    const signature = this.generateSignature(queryString);
    try {
      const response = await this.httpClient.delete(`/api/v3/order?${queryString}&signature=${signature}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞:', error.message);
      throw error;
    }
  }

  async getOpenOrders(symbol = null) {
    if (!this.apiKey || !this.secretKey) {
      throw new Error('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∫–ª—é—á–∏ API');
    }
    const timestamp = Date.now();
    let queryString = `timestamp=${timestamp}`;
    if (symbol) queryString += `&symbol=${symbol}`;
    const signature = this.generateSignature(queryString);
    try {
      const response = await this.httpClient.get(`/api/v3/openOrders?${queryString}&signature=${signature}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error.message);
      throw error;
    }
  }

  subscribeToKlineStream(symbol, interval, callback) {
    const streamName = `${symbol.toLowerCase()}@kline_${interval}`;
    const wsConnection = new WebSocket(`${this.wsBaseUrl}/${streamName}`);
    wsConnection.onopen = () => console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${streamName}`);
    
    wsConnection.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if (data.k) {
          const kline = data.k;
          const standardizedData = {
            openTime: kline.t,
            open: parseFloat(kline.o),
            high: parseFloat(kline.h),
            low: parseFloat(kline.l),
            close: parseFloat(kline.c),
            volume: parseFloat(kline.v),
            closeTime: kline.T
          };
          callback(standardizedData);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:`, error);
      }
    };
    
    wsConnection.onerror = (error) => console.error(`WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è ${streamName}:`, error);
    wsConnection.onclose = () => {
      console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è ${streamName}`);
      delete this.wsConnections[streamName];
    };
    
    this.wsConnections[streamName] = wsConnection;
    return streamName;
  }

  unsubscribeFromStream(streamName) {
    if (this.wsConnections[streamName]) {
      this.wsConnections[streamName].close();
      return true;
    }
    return false;
  }

  // üîß –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
  async getTicker(symbol) {
    try {
      const response = await this.httpClient.get('/api/v3/ticker/price', {
        params: { symbol }
      });
      return {
        symbol: response.data.symbol,
        price: parseFloat(response.data.price)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞:', error.message);
      throw error;
    }
  }
}

module.exports = BinanceConnector;